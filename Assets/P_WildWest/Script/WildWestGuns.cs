//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/P_WildWest/WildWestGuns.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WildWestGuns: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WildWestGuns()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WildWestGuns"",
    ""maps"": [
        {
            ""name"": ""Guns"",
            ""id"": ""28af4887-637f-424d-9e1a-604200729818"",
            ""actions"": [
                {
                    ""name"": ""TriggerLeft"",
                    ""type"": ""Button"",
                    ""id"": ""5f155a99-7668-4a3a-9a47-56f8c6d6a96c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpButtonLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e3bc8580-40f7-45d8-b0b4-fa7d5dfd8799"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownButtonLeft"",
                    ""type"": ""Button"",
                    ""id"": ""59f9d639-05ec-4439-8a78-a3c56f71bd48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""53dc79a3-1e17-4ab2-8a94-86e897ec796e"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff93ea8b-bb2b-47db-b5f8-5eb12a54ab4c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d74c2e6d-a076-49a6-bbc7-1c60d86d72fa"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88c26b4c-9f30-46f0-85f2-e24870e61e70"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18c52659-de7b-411d-a484-1258d1b40716"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpButtonLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30d7cccb-f465-4bbf-a2c1-ae7e3acb3773"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownButtonLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Guns
        m_Guns = asset.FindActionMap("Guns", throwIfNotFound: true);
        m_Guns_TriggerLeft = m_Guns.FindAction("TriggerLeft", throwIfNotFound: true);
        m_Guns_UpButtonLeft = m_Guns.FindAction("UpButtonLeft", throwIfNotFound: true);
        m_Guns_DownButtonLeft = m_Guns.FindAction("DownButtonLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Guns
    private readonly InputActionMap m_Guns;
    private List<IGunsActions> m_GunsActionsCallbackInterfaces = new List<IGunsActions>();
    private readonly InputAction m_Guns_TriggerLeft;
    private readonly InputAction m_Guns_UpButtonLeft;
    private readonly InputAction m_Guns_DownButtonLeft;
    public struct GunsActions
    {
        private @WildWestGuns m_Wrapper;
        public GunsActions(@WildWestGuns wrapper) { m_Wrapper = wrapper; }
        public InputAction @TriggerLeft => m_Wrapper.m_Guns_TriggerLeft;
        public InputAction @UpButtonLeft => m_Wrapper.m_Guns_UpButtonLeft;
        public InputAction @DownButtonLeft => m_Wrapper.m_Guns_DownButtonLeft;
        public InputActionMap Get() { return m_Wrapper.m_Guns; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GunsActions set) { return set.Get(); }
        public void AddCallbacks(IGunsActions instance)
        {
            if (instance == null || m_Wrapper.m_GunsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GunsActionsCallbackInterfaces.Add(instance);
            @TriggerLeft.started += instance.OnTriggerLeft;
            @TriggerLeft.performed += instance.OnTriggerLeft;
            @TriggerLeft.canceled += instance.OnTriggerLeft;
            @UpButtonLeft.started += instance.OnUpButtonLeft;
            @UpButtonLeft.performed += instance.OnUpButtonLeft;
            @UpButtonLeft.canceled += instance.OnUpButtonLeft;
            @DownButtonLeft.started += instance.OnDownButtonLeft;
            @DownButtonLeft.performed += instance.OnDownButtonLeft;
            @DownButtonLeft.canceled += instance.OnDownButtonLeft;
        }

        private void UnregisterCallbacks(IGunsActions instance)
        {
            @TriggerLeft.started -= instance.OnTriggerLeft;
            @TriggerLeft.performed -= instance.OnTriggerLeft;
            @TriggerLeft.canceled -= instance.OnTriggerLeft;
            @UpButtonLeft.started -= instance.OnUpButtonLeft;
            @UpButtonLeft.performed -= instance.OnUpButtonLeft;
            @UpButtonLeft.canceled -= instance.OnUpButtonLeft;
            @DownButtonLeft.started -= instance.OnDownButtonLeft;
            @DownButtonLeft.performed -= instance.OnDownButtonLeft;
            @DownButtonLeft.canceled -= instance.OnDownButtonLeft;
        }

        public void RemoveCallbacks(IGunsActions instance)
        {
            if (m_Wrapper.m_GunsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGunsActions instance)
        {
            foreach (var item in m_Wrapper.m_GunsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GunsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GunsActions @Guns => new GunsActions(this);
    public interface IGunsActions
    {
        void OnTriggerLeft(InputAction.CallbackContext context);
        void OnUpButtonLeft(InputAction.CallbackContext context);
        void OnDownButtonLeft(InputAction.CallbackContext context);
    }
}
